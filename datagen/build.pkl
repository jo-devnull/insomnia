import "./tags/@tags.pkl" as tags
import "./utils.pkl" as utils

const path {
  data = "./resourcepacks/@insomnia/data"
  assets = "./resourcepacks/@insomnia/assets"
}

const json: FileOutput = new {
  value = null
  renderer = new JsonRenderer {}
}

function buildEmi() = new Mapping<String, FileOutput> {
  ["emi.json"] = (json) {
    value {
      hidden_stacks = utils.load("../minecraft/emi.json")
        .getOrNull("hidden_stacks")

      favorites = new Listing {
        for (tag in tags.toMap().keys) {
          new { stack = "#item:category:\(tag)" }
        }
      }
    }
  }
}

function buildLang() = new Mapping<String, FileOutput> {
  ["\(path.assets)/category/lang/pt_br.json"] = (json) {
    value {
      for (key, tag in tags.toMap()) {
        ["tag.item.category.\(key)"] = tag.title
      }
    }
  }
}

function buildTags() = new Mapping<String, FileOutput> {
  for (key, tag in tags.toMap()) {
    ["\(path.data)/category/tags/items/\(key).json"] = (json) {
      value {
        replace = false
        values = new Listing<String> {
          for (modname, list in tag.mod) {
            for (item in list) {
              if (item.contains(":")) item else "\(modname):\(item)"
            }
          }
        }
      }
    }

    ["\(path.assets)/category/models/tag/item/\(key).json"] = (json) {
      value { parent = tag.icon }
    }
  }
}

function buildMisc() = new Mapping<String, FileOutput> {
  for (key, tag in import("misc/tags.pkl").toMap()) {
      when (key.contains("/")) {
        ["./resourcepacks/@insomnia/\(key)"] = (json) {
          value = tag
        }
      } else {
        ["\(path.data)/modpack/tags/\(key).json"] = (json) {
          value = tag
        }
      }
    }
}

function buildRecipes() = new Mapping<String, FileOutput> {
  for (_, mod in import*("misc/recipes/*.pkl").toMap()) {
    for (key, recipe in mod.toMap()) {
      when (key.contains("/")) {
        ["./resourcepacks/@insomnia/\(key)"] = (json) {
          value = recipe
        }
      } else {
        ["\(path.data)/modpack/recipes/\(key).json"] = (json) {
          value = recipe
        }
      }
    }
  }

  for (modid, list in import("misc/recipes/remove.pkl").toMap()) {
    for (recipe in list) {
      [List(path.data, modid, "recipes", recipe).join("/") + ".json"] = (json) {
        value {
          type = "notreepunching:empty"
        }
      }
    }
  }
}

function buildReplacements() = new Mapping<String, FileOutput> {
  ["\(path.data)/oei/replacements/replacements.json"] = (json) {
    value {
      for (key, val in import("misc/replace.pkl").toMap()) {
        for (item in val.items) {
          when (item is String) {
            new {
              matchItems { "\(val.from):\(item)" }
              resultItems = "\(val.to):\(item)"
            }
          } else {
            new {
              matchItems { "\(val.from):\(item[0])" }
              resultItems = "\(val.to):\(item[1])"
            }
          }
        }
      }
    }
  }
}

output {
  files {
    ...buildEmi()
    ...buildTags()
    ...buildLang()
    ...buildMisc()
    ...buildRecipes()
    ...buildReplacements()

    ["./config/incontrol/spawn.json"] = (json) {
      value = import("misc/spawn.pkl").rules
    }

    ["./config/incontrol/phases.json"] = (json) {
      value = import("misc/spawn.pkl").phases
    }

    ["./resourcepacks/@insomnia/pack.mcmeta"] = (json) {
      value {
        pack {
          pack_format = 15
          description = "Data & Assets for the modpack"
        }
      }
    }
  }
}
